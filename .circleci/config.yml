version: 2
jobs:
  build-code: 
    docker:
      - image: node:argon
    steps:
      - checkout
      - run:
           name: echo nodejs information
           command: |
             echo "node version $(node -v) running"
             echo "npm version $(npm -v) running"
             echo "npm registry $(npm config get registry)"
      - run: 
          name: install
          command: npm install 
      
      - run: 
          name: lint
          command: npm run lint

      - run: 
          name: test
          command: npm test 

      - run: 
           name: notify slack on failure
           when: on_fail
           command: |
             echo "sending fail slack notification ..."
             curl -X POST -H 'Content-type: application/json' --data '{"attachments": [{"fallback": "Geoserver Build result","color": "#FF0000" ,"pretext": "Geoserver build-publish-deploy pipeline:","title": "Job: [build-code] for (Geoserver) failed. Check circleci for details.","actions": [{"type": "button","name": "check_workflow","text": "Check Workflow","url": "https://circleci.com/workflow-run/'${CIRCLE_WORKFLOW_ID}'","style": "danger"},{"type": "button","name": "check_job","text": "Check Job","url": "https://circleci.com/gh/Turistforeningen/Geoserver/'${CIRCLE_BUILD_NUM}'","style": "danger"}]}] }' ${SLACK_WEBHOOK_CIRCLECI}    
     
      - run: 
           name: notify slack on sucess
           when: on_success
           command: |
             echo "sending sucess slack notification ..."
             curl -X POST -H 'Content-type: application/json' --data '{"attachments": [{"fallback": "Geoserver Build result","color": "#36a64f" ,"pretext": "Geoserver build-publish-deploy pipeline:","title": "Job: [build-code] for (Geoserver) completed sucessfully. Check circleci for details.","actions": [{"type": "button","name": "check_workflow","text": "Check Workflow","url": "https://circleci.com/workflow-run/'${CIRCLE_WORKFLOW_ID}'","style": "primary"},{"type": "button","name": "check_job","text": "Check Job","url": "https://circleci.com/gh/Turistforeningen/Geoserver/'${CIRCLE_BUILD_NUM}'","style": "primary"}]}] }' ${SLACK_WEBHOOK_CIRCLECI}           


  build-image:
    docker:
      - image: google/cloud-sdk:latest

    working_directory: ~/repo

    steps:
      - run:
          name: authenticate with gcloud
          command: |
            echo $GCLOUD_DOCKER_CREDENTIALS > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
      # if authentication succeeded - checkout code
      - checkout

      # starts a remote docker environment to run docker commands
      - setup_remote_docker

      - run:
          name: build Geoserver docker image and push image to GCR
          command: |
            gcloud auth configure-docker --quiet
            TAG=geoserver-${CIRCLE_SHA1:0:9}
            docker build -t geoserver .
            docker tag geoserver eu.gcr.io/dnt-docker-registry-public/geoserver:latest
            docker tag geoserver eu.gcr.io/dnt-docker-registry-public/geoserver:$TAG
            docker push eu.gcr.io/dnt-docker-registry-public/geoserver:latest
            docker push eu.gcr.io/dnt-docker-registry-public/geoserver:$TAG

      - run: 
          name: notify slack on sucess
          when: on_success
          command: |
            echo "sending sucess slack notification ..."
            curl -X POST -H 'Content-type: application/json' --data '{"attachments": [{"fallback": "Geoserver Build result","color": "#36a64f" ,"pretext": "Geoserver build-publish-deploy pipeline:","title": "Job: [build-image] for (Geoserver) completed sucessfully. Check circleci for details.",}] }' ${SLACK_WEBHOOK_CIRCLECI} 

      - run: 
          name: notify slack on failure
          when: on_fail
          command: |
            echo "sending fail slack notification ..."
            curl -X POST -H 'Content-type: application/json' --data '{"attachments": [{"fallback": "Geoserver Build result","color": "#FF0000" ,"pretext": "Geoserver build-publish-deploy pipeline:","title": "Job: [build-image] for (Geoserver) failed. Check circleci for details.",}] }' ${SLACK_WEBHOOK_CIRCLECI}                      
  
  deploy-to-dev:
    docker:
      - image: praqma/helmsman:v1.3.0-helm-v2.8.1
    steps:
      - checkout
      - run:
          name: run helmsman
          command: |
            export IMAGE_TAG=geoserver-${CIRCLE_SHA1:0:9}
            helmsman -debug -apply -f .circleci/helmsman-dev-deployment.toml
  deploy-to-beta:
    docker:
      - image: praqma/helmsman:v1.3.0-helm-v2.8.1
    steps:
      - checkout
      - run:
          name: run helmsman
          command: |
            helmsman -debug -apply -f .circleci/helmsman-beta-deployment.toml

  # deploy-to-prod:
  #   docker:
  #     - image: praqma/helmsman:v1.3.0-helm-v2.8.1
  #   steps:
  #     - checkout
  #     - run:
  #         name: run helmsman
  #         command: |
  #           helmsman -debug -apply -f .circleci/helmsman-prod-deployment.toml          
workflows:
  version: 2
  build-publish-deploy:
    jobs:
      - build-code:
          filters:
            branches:
              only:
                - circleci
      - build-image:
          requires:
            - build-code
          context: dnt-k8s-dev-beta
          filters:
            branches:
              only:
                - circleci
      # - deploy-to-dev:
      #     requires:
      #       - build-image
      #     context: dnt-k8s-dev-beta
      #     filters:
      #       branches:
      #         only:
      #           - master
      # - deploy-to-beta:
      #     context: dnt-k8s-dev-beta
      #     filters:
      #       branches:
      #         only:
      #           - deploy-beta
      
      # - deploy-to-prod:
      #     context: dnt-k8s-prod
      #     filters:
      #       branches:
      #         only:
      #           - deploy-prod          